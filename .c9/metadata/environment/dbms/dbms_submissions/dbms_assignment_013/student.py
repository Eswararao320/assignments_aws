{"changed":true,"filter":false,"title":"student.py","tooltip":"/dbms/dbms_submissions/dbms_assignment_013/student.py","value":"class DoesNotExist(Exception):\n\tpass\n\nclass MultipleObjectsReturned(Exception):\n\tpass\n\nclass InvalidField(Exception):\n\tpass\n\nclass Student:\n\tdef __init__(self, name, age, score):\n\t\tself.name = name\n\t\tself.student_id = None\n\t\tself.age = age\n\t\tself.score = score\n\t\t\n\tdef __repr__(self):\n\t\treturn \"Student(student_id={0}, name={1}, age={2}, score={3})\".format(self.student_id,self.name,self.age,self.score)\n\t\n\t@classmethod\n\tdef get(cls,**kwargs): \n\t\t\n\t\tfor key,value in kwargs.items():\n\t\t\tcls.column = key\n\t\t\tcls.value = value\n\t\n\t\tif cls.column not in ('student_id','name','age','score'):\n\t\t\traise InvalidField('InvalidField')\n\t\t\t\n\t\tif cls.column == 'name':\n\t\t\trecord = read_data(f\"select * from Student where {cls.column} = \\'{cls.value}\\'\")\n\t\telse:\n\t\t\trecord = read_data(f\"select * from Student where {cls.column} = {cls.value}\")\n\t\t\n\t\tif len(record)==0:\n\t\t\traise DoesNotExist('DoesNotExist')\n\t\telif len(record)>1:\n\t\t\traise MultipleObjectsReturned('MultipleObjectsReturned')\n\t\n\t\toutput = Student(record[0][1],record[0][2],record[0][3])\n\t\toutput.student_id = record[0][0]\n\t\treturn output\n\t\n\t@staticmethod\n\tdef filter(**args):\n\t\tfinal_outcome = []\n\t\tfor k,v in args.items():\n\t\t\tinvalid_field=k.split('__')#k anedi age__lt aite split chesaka a lo age,b lo lt untadi \n\t\t\t#a,b=k.split('__') \n\t\t\tif invalid_field[0] not in ('student_id','name','age','score'):\n\t\t\t\traise InvalidField\n\t\t\tif k in ('student_id','name','age','score'):\n\t\t\t\trecords = read_data(f\"select * from Student where {k} = '{v}'\")\n\t\t\telse:\n\t\t\t\tvar = k.split('__')\n\t\t\t\t#k anedi age__lt aite split chesaka a lo age,b lo lt untadi\n\t\t\t\t#a,b=k.split('__')\n\t\t\t\tif var[1] == 'lt':\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} < {v}\")\n\t\t\t\telif var[1] == 'lte':\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} <= {v}\")\n\t\t\t\telif var[1] == 'gt':\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} > {v}\")\n\t\t\t\telif var[1] == 'gte':\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} >= {v}\")\n\t\t\t\telif var[1] == 'neq':\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} <> '{v}'\")\n\t\t\t\telif var[1] == 'in':\n\t\t\t\t\tin_condition = tuple(v)\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} in {in_condition}\")\n\t\t\t\telif var[1] == 'contains':\n\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} LIKE '%{v}%'\")\n\t\t\t\n\t\t\tfor i in range(len(records)):\n\t\t\t\toutput = Student(records[i][1],records[i][2],records[i][3])\n\t\t\t\toutput.student_id = records[i][0]\n\t\t\t\tfinal_outcome.append(output)\n\n\t\treturn final_outcome\n\t\t\t\n\tdef save(self):\n\t\timport sqlite3\n\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")\n\t\tcrsr = connection.cursor() \n\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") \n\t\tif self.student_id == None:\n\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        \n\t\t\tself.student_id = crsr.lastrowid\n\t\telse:\n\t\t\tdata = read_data(f\"select * from  Student Where student_id={self.student_id}\")\n\t\t\tif len(data) != 0:\n\t\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")\n\t\t\telse:\n\t\t\t\tcrsr.execute(f\"insert into Student (student_id,name,age,score) values ({self.student_id},\\'{self.name}\\',{self.age},{self.score})\")\n\t\tconnection.commit() \n\t\tconnection.close()\n\n\tdef delete(self):\n\t\twrite_data(f\"delete from student where student_id={self.student_id}\")\n\t\t\n\t\ndef write_data(sql_query):\n\timport sqlite3\n\tconnection = sqlite3.connect(\"selected_students.sqlite3\")\n\tcrsr = connection.cursor() \n\tcrsr.execute(\"PRAGMA foreign_keys=on;\") \n\tcrsr.execute(sql_query) \n\tconnection.commit() \n\tconnection.close()\n\ndef read_data(sql_query):\n\timport sqlite3\n\tconnection = sqlite3.connect(\"selected_students.sqlite3\")\n\tcrsr = connection.cursor()\n\tcrsr.execute(sql_query) \n\tans= crsr.fetchall()  \n\tconnection.close() \n\treturn ans","undoManager":{"mark":-2,"position":60,"stack":[[{"start":{"row":0,"column":0},"end":{"row":118,"column":0},"action":"remove","lines":["class DoesNotExist(Exception):# all ready python lo DoesNotExist ane error ledu kanuka class lo define chesukunam","\tpass                      ","","class MultipleObjectsReturned(Exception):","\tpass","","class InvalidField(Exception):","\tpass","","class Student:","\tdef __init__(self, name, age, score):","\t\tself.name = name","\t\tself.student_id = None","\t\tself.age = age","\t\tself.score = score","","\t@classmethod","\tdef get(cls,**kwargs): # **kwargs is used to multiple aurguments at a time  ","\t\t","\t\tfor k,v in kwargs.items():","\t\t\tcls.column = k","\t\t\tcls.value = v","\t\t\t#print(k,v)\t  ","\t\tif cls.column not in ('student_id','name','age','score'):","\t\t\traise InvalidField('InvalidField')","\t\t\t","\t\tif cls.column == 'name':","\t\t\trecord = read_data(f\"select * from Student where {cls.column} = \\'{cls.value}\\'\") #  f is nothing but  .formate()","\t\telse:","\t\t\trecord = read_data(f\"select * from Student where {cls.column} = {cls.value}\") #  f is nothing but  .formate()","\t\t\t#print(record)","\t\tif len(record)==0:","\t\t\traise DoesNotExist('DoesNotExist')","\t\telif len(record)>1:","\t\t\traise MultipleObjectsReturned('MultipleObjectsReturned')","\t\t","\t\toutput = Student(record[0][1],record[0][2],record[0][3])","\t\toutput.student_id = record[0][0]","\t\treturn output","","\tdef save(self):","\t\timport sqlite3","\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\t\tcrsr = connection.cursor() ","\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\t\tif self.student_id == None:","\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        ","\t\t\tself.student_id = crsr.lastrowid","\t\telse: ","\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")","\t\tconnection.commit()","\t\tconnection.close()","","\tdef delete(self):","\t\twrite_data(f\"delete from student where student_id={self.student_id}\")","\t\t","\t\t","\t\t","\t@classmethod","\tdef filter (cls,**kwargs):","\t\tli=[]","\t\tfor k,v in kwargs.items():","\t\t\tif(\"__\" in k):","\t\t\t\tfield,exprssion=k.split(\"__\")","\t\t\t\t","\t\t\t\tif k not in ('student_id','name','age','score'):","\t\t\t\t\traise InvalidField('InvalidField')","\t\t","\t\t\t\tif exprssion == 'lt':","\t\t\t\t\trecord=\"select * from Student where {} < {}\".format(field,v)","\t\t\t\telif exprssion == 'lte':","\t\t\t\t\trecord=\"select * from Student where {} <= {}\".format(field,v)","\t\t\t\telif exprssion == 'gt':","\t\t\t\t\trecord=\"select * from Student where {} > {}\".format(field,v)","\t\t\t\telif exprssion == 'gte':","\t\t\t\t\trecord=\"select * from Student where {} >= {}\".format(field,v)","\t\t\t\telif exprssion == 'neq':","\t\t\t\t\trecord=\"select * from Student where {} <> '{}'\".format(field,v)","\t\t\t\telif exprssion == 'in':","\t\t\t\t\trecord=\"select * from Student where {} in {}\".format(field,tuple(v))","\t\t\t\telif exprssion == 'contains':","\t\t\t\t\trecord=\"select * from student where {} like '%{}%'\".format(field,v)","\t\t\telse:","\t\t\t\tif k not in ('student_id','name','age','score'):","\t\t\t\t\traise InvalidField('InvalidField')","\t\t\t\trecord=\"select * from student where {} = '{}'\".format(k,v)","","\t\t\toutput=read_data(record)","\t\tfor i in range(len(output)):","\t\t\ts=Student(output[i][1],output[i][2],output[i][3])","\t\t\ts.student_id=output[i][0]","\t\t\tli.append(s)","\t\treturn li","","def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor()","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close()      ","\treturn ans","# for check out puts :- new Terminal,sqlite3 students.sqlite3,create table,insert values","# print(read_data(\"select * from student;\"))","# s = Student.get(student_id=4)","# s.name = 'lallu'","# s.save()","# print(read_data(\"select * from student;\"))","",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":51,"column":25},"action":"insert","lines":["\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} LIKE '%{v}%'\")","\t\t\t","\t\t\tfor i in range(len(records)):","\t\t\t\toutput = Student(records[i][1],records[i][2],records[i][3])","\t\t\t\toutput.student_id = records[i][0]","\t\t\t\tfinal_outcome.append(output)","","\t\treturn final_outcome","\t\t\t","\tdef save(self):","\t\timport sqlite3","\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\t\tcrsr = connection.cursor() ","\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\t\tif self.student_id == None:","\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        ","\t\t\tself.student_id = crsr.lastrowid","\t\telse:","\t\t\tdata = read_data(f\"select * from  Student Where student_id={self.student_id}\")","\t\t\tif len(data) != 0:","\t\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")","\t\t\telse:","\t\t\t\tcrsr.execute(f\"insert into Student (student_id,name,age,score) values ({self.student_id},\\'{self.name}\\',{self.age},{self.score})\")","\t\tconnection.commit() ","\t\tconnection.close()","","\tdef delete(self):","\t\twrite_data(f\"delete from student where student_id={self.student_id}\")","\t\t","\t","def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor()","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","\t","#print(read_data(\"select * from Student\"))","#ages = [25,30]","#selected_students = Student.filter(name='mahi')","#print(selected_students)"],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":51,"column":25},"action":"remove","lines":["\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} LIKE '%{v}%'\")","\t\t\t","\t\t\tfor i in range(len(records)):","\t\t\t\toutput = Student(records[i][1],records[i][2],records[i][3])","\t\t\t\toutput.student_id = records[i][0]","\t\t\t\tfinal_outcome.append(output)","","\t\treturn final_outcome","\t\t\t","\tdef save(self):","\t\timport sqlite3","\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\t\tcrsr = connection.cursor() ","\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\t\tif self.student_id == None:","\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        ","\t\t\tself.student_id = crsr.lastrowid","\t\telse:","\t\t\tdata = read_data(f\"select * from  Student Where student_id={self.student_id}\")","\t\t\tif len(data) != 0:","\t\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")","\t\t\telse:","\t\t\t\tcrsr.execute(f\"insert into Student (student_id,name,age,score) values ({self.student_id},\\'{self.name}\\',{self.age},{self.score})\")","\t\tconnection.commit() ","\t\tconnection.close()","","\tdef delete(self):","\t\twrite_data(f\"delete from student where student_id={self.student_id}\")","\t\t","\t","def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor()","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","\t","#print(read_data(\"select * from Student\"))","#ages = [25,30]","#selected_students = Student.filter(name='mahi')","#print(selected_students)"],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":49,"column":11},"action":"insert","lines":["\t\t\t\t\tin_condition = tuple(v)","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} in {in_condition}\")","\t\t\t\telif var[1] == 'contains':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} LIKE '%{v}%'\")","\t\t\t","\t\t\tfor i in range(len(records)):","\t\t\t\toutput = Student(records[i][1],records[i][2],records[i][3])","\t\t\t\toutput.student_id = records[i][0]","\t\t\t\tfinal_outcome.append(output)","","\t\treturn final_outcome","\t\t\t","\tdef save(self):","\t\timport sqlite3","\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\t\tcrsr = connection.cursor() ","\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\t\tif self.student_id == None:","\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        ","\t\t\tself.student_id = crsr.lastrowid","\t\telse:","\t\t\tdata = read_data(f\"select * from  Student Where student_id={self.student_id}\")","\t\t\tif len(data) != 0:","\t\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")","\t\t\telse:","\t\t\t\tcrsr.execute(f\"insert into Student (student_id,name,age,score) values ({self.student_id},\\'{self.name}\\',{self.age},{self.score})\")","\t\tconnection.commit() ","\t\tconnection.close()","","\tdef delete(self):","\t\twrite_data(f\"delete from student where student_id={self.student_id}\")","\t\t","\t","def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor()","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans"],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":49,"column":11},"action":"remove","lines":["\t\t\t\t\tin_condition = tuple(v)","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} in {in_condition}\")","\t\t\t\telif var[1] == 'contains':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} LIKE '%{v}%'\")","\t\t\t","\t\t\tfor i in range(len(records)):","\t\t\t\toutput = Student(records[i][1],records[i][2],records[i][3])","\t\t\t\toutput.student_id = records[i][0]","\t\t\t\tfinal_outcome.append(output)","","\t\treturn final_outcome","\t\t\t","\tdef save(self):","\t\timport sqlite3","\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\t\tcrsr = connection.cursor() ","\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\t\tif self.student_id == None:","\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        ","\t\t\tself.student_id = crsr.lastrowid","\t\telse:","\t\t\tdata = read_data(f\"select * from  Student Where student_id={self.student_id}\")","\t\t\tif len(data) != 0:","\t\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")","\t\t\telse:","\t\t\t\tcrsr.execute(f\"insert into Student (student_id,name,age,score) values ({self.student_id},\\'{self.name}\\',{self.age},{self.score})\")","\t\tconnection.commit() ","\t\tconnection.close()","","\tdef delete(self):","\t\twrite_data(f\"delete from student where student_id={self.student_id}\")","\t\t","\t","def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor()","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans"],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":114,"column":11},"action":"insert","lines":["class DoesNotExist(Exception):","\tpass","","class MultipleObjectsReturned(Exception):","\tpass","","class InvalidField(Exception):","\tpass","","class Student:","\tdef __init__(self, name, age, score):","\t\tself.name = name","\t\tself.student_id = None","\t\tself.age = age","\t\tself.score = score","\t\t","\tdef __repr__(self):","\t\treturn \"Student(student_id={0}, name={1}, age={2}, score={3})\".format(self.student_id,self.name,self.age,self.score)","\t","\t@classmethod","\tdef get(cls,**kwargs): ","\t\t","\t\tfor key,value in kwargs.items():","\t\t\tcls.column = key","\t\t\tcls.value = value","\t","\t\tif cls.column not in ('student_id','name','age','score'):","\t\t\traise InvalidField('InvalidField')","\t\t\t","\t\tif cls.column == 'name':","\t\t\trecord = read_data(f\"select * from Student where {cls.column} = \\'{cls.value}\\'\")","\t\telse:","\t\t\trecord = read_data(f\"select * from Student where {cls.column} = {cls.value}\")","\t\t","\t\tif len(record)==0:","\t\t\traise DoesNotExist('DoesNotExist')","\t\telif len(record)>1:","\t\t\traise MultipleObjectsReturned('MultipleObjectsReturned')","\t","\t\toutput = Student(record[0][1],record[0][2],record[0][3])","\t\toutput.student_id = record[0][0]","\t\treturn output","\t","\t@staticmethod","\tdef filter(**args):","\t\tfinal_outcome = []","\t\tfor k,v in args.items():","\t\t\tinvalid_field=k.split('__')","\t\t\tif invalid_field[0] not in ('student_id','name','age','score'):","\t\t\t\traise InvalidField","\t\t\tif k in ('student_id','name','age','score'):","\t\t\t\trecords = read_data(f\"select * from Student where {k} = '{v}'\")","\t\t\telse:","\t\t\t\tvar = k.split('__')","\t\t\t\tif var[1] == 'lt':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} < {v}\")","\t\t\t\telif var[1] == 'lte':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} <= {v}\")","\t\t\t\telif var[1] == 'gt':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} > {v}\")","\t\t\t\telif var[1] == 'gte':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} >= {v}\")","\t\t\t\telif var[1] == 'neq':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} <> '{v}'\")","\t\t\t\telif var[1] == 'in':","\t\t\t\t\tin_condition = tuple(v)","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} in {in_condition}\")","\t\t\t\telif var[1] == 'contains':","\t\t\t\t\trecords = read_data(f\"select * from Student where {var[0]} LIKE '%{v}%'\")","\t\t\t","\t\t\tfor i in range(len(records)):","\t\t\t\toutput = Student(records[i][1],records[i][2],records[i][3])","\t\t\t\toutput.student_id = records[i][0]","\t\t\t\tfinal_outcome.append(output)","","\t\treturn final_outcome","\t\t\t","\tdef save(self):","\t\timport sqlite3","\t\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\t\tcrsr = connection.cursor() ","\t\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\t\tif self.student_id == None:","\t\t\tcrsr.execute(f\"insert into Student (name,age,score) values (\\'{self.name}\\',{self.age},{self.score})\")        ","\t\t\tself.student_id = crsr.lastrowid","\t\telse:","\t\t\tdata = read_data(f\"select * from  Student Where student_id={self.student_id}\")","\t\t\tif len(data) != 0:","\t\t\t\tcrsr.execute(f\"update Student SET name=\\'{self.name}\\',age={self.age},score={self.score}\")","\t\t\telse:","\t\t\t\tcrsr.execute(f\"insert into Student (student_id,name,age,score) values ({self.student_id},\\'{self.name}\\',{self.age},{self.score})\")","\t\tconnection.commit() ","\t\tconnection.close()","","\tdef delete(self):","\t\twrite_data(f\"delete from student where student_id={self.student_id}\")","\t\t","\t","def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor()","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans"],"id":7}],[{"start":{"row":47,"column":30},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":8},{"start":{"row":48,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["\t\t\t"]},{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"insert","lines":["#"]}],[{"start":{"row":48,"column":4},"end":{"row":48,"column":5},"action":"insert","lines":["a"],"id":9},{"start":{"row":48,"column":5},"end":{"row":48,"column":6},"action":"insert","lines":[","]},{"start":{"row":48,"column":6},"end":{"row":48,"column":7},"action":"insert","lines":["b"]}],[{"start":{"row":48,"column":7},"end":{"row":48,"column":8},"action":"insert","lines":["="],"id":10}],[{"start":{"row":48,"column":8},"end":{"row":48,"column":9},"action":"insert","lines":["k"],"id":11},{"start":{"row":48,"column":9},"end":{"row":48,"column":10},"action":"insert","lines":["."]}],[{"start":{"row":48,"column":10},"end":{"row":48,"column":11},"action":"insert","lines":["s"],"id":12},{"start":{"row":48,"column":11},"end":{"row":48,"column":12},"action":"insert","lines":["p"]},{"start":{"row":48,"column":12},"end":{"row":48,"column":13},"action":"insert","lines":["l"]},{"start":{"row":48,"column":13},"end":{"row":48,"column":14},"action":"insert","lines":["i"]},{"start":{"row":48,"column":14},"end":{"row":48,"column":15},"action":"insert","lines":["t"]}],[{"start":{"row":48,"column":15},"end":{"row":48,"column":17},"action":"insert","lines":["()"],"id":13}],[{"start":{"row":48,"column":16},"end":{"row":48,"column":18},"action":"insert","lines":["''"],"id":14}],[{"start":{"row":48,"column":17},"end":{"row":48,"column":18},"action":"insert","lines":["_"],"id":15},{"start":{"row":48,"column":18},"end":{"row":48,"column":19},"action":"insert","lines":["_"]}],[{"start":{"row":48,"column":21},"end":{"row":48,"column":22},"action":"insert","lines":[" "],"id":16}],[{"start":{"row":48,"column":22},"end":{"row":48,"column":23},"action":"insert","lines":["l"],"id":17},{"start":{"row":48,"column":23},"end":{"row":48,"column":24},"action":"insert","lines":["i"]},{"start":{"row":48,"column":24},"end":{"row":48,"column":25},"action":"insert","lines":["k"]},{"start":{"row":48,"column":25},"end":{"row":48,"column":26},"action":"insert","lines":["e"]}],[{"start":{"row":48,"column":26},"end":{"row":48,"column":27},"action":"insert","lines":[" "],"id":18}],[{"start":{"row":48,"column":27},"end":{"row":48,"column":28},"action":"insert","lines":["o"],"id":19},{"start":{"row":48,"column":28},"end":{"row":48,"column":29},"action":"insert","lines":["="]}],[{"start":{"row":48,"column":29},"end":{"row":48,"column":30},"action":"insert","lines":["a"],"id":20}],[{"start":{"row":48,"column":29},"end":{"row":48,"column":30},"action":"remove","lines":["a"],"id":21},{"start":{"row":48,"column":28},"end":{"row":48,"column":29},"action":"remove","lines":["="]},{"start":{"row":48,"column":27},"end":{"row":48,"column":28},"action":"remove","lines":["o"]}],[{"start":{"row":48,"column":27},"end":{"row":48,"column":28},"action":"insert","lines":["a"],"id":22},{"start":{"row":48,"column":28},"end":{"row":48,"column":29},"action":"insert","lines":["="]},{"start":{"row":48,"column":29},"end":{"row":48,"column":30},"action":"insert","lines":["0"]}],[{"start":{"row":48,"column":30},"end":{"row":48,"column":31},"action":"insert","lines":[","],"id":23}],[{"start":{"row":48,"column":30},"end":{"row":48,"column":31},"action":"remove","lines":[","],"id":24},{"start":{"row":48,"column":29},"end":{"row":48,"column":30},"action":"remove","lines":["0"]},{"start":{"row":48,"column":28},"end":{"row":48,"column":29},"action":"remove","lines":["="]},{"start":{"row":48,"column":27},"end":{"row":48,"column":28},"action":"remove","lines":["a"]}],[{"start":{"row":48,"column":26},"end":{"row":48,"column":27},"action":"remove","lines":[" "],"id":25},{"start":{"row":48,"column":25},"end":{"row":48,"column":26},"action":"remove","lines":["e"]},{"start":{"row":48,"column":24},"end":{"row":48,"column":25},"action":"remove","lines":["k"]},{"start":{"row":48,"column":23},"end":{"row":48,"column":24},"action":"remove","lines":["i"]},{"start":{"row":48,"column":22},"end":{"row":48,"column":23},"action":"remove","lines":["l"]}],[{"start":{"row":48,"column":22},"end":{"row":48,"column":23},"action":"insert","lines":["a"],"id":26}],[{"start":{"row":48,"column":22},"end":{"row":48,"column":23},"action":"remove","lines":["a"],"id":27}],[{"start":{"row":47,"column":30},"end":{"row":47,"column":31},"action":"insert","lines":["#"],"id":28}],[{"start":{"row":47,"column":31},"end":{"row":47,"column":32},"action":"insert","lines":["k"],"id":29},{"start":{"row":47,"column":32},"end":{"row":47,"column":33},"action":"insert","lines":["="]}],[{"start":{"row":47,"column":33},"end":{"row":47,"column":34},"action":"insert","lines":["a"],"id":30},{"start":{"row":47,"column":34},"end":{"row":47,"column":35},"action":"insert","lines":["g"]},{"start":{"row":47,"column":35},"end":{"row":47,"column":36},"action":"insert","lines":["e"]}],[{"start":{"row":47,"column":36},"end":{"row":47,"column":37},"action":"insert","lines":["_"],"id":31},{"start":{"row":47,"column":37},"end":{"row":47,"column":38},"action":"insert","lines":["_"]},{"start":{"row":47,"column":38},"end":{"row":47,"column":39},"action":"insert","lines":["l"]},{"start":{"row":47,"column":39},"end":{"row":47,"column":40},"action":"insert","lines":["t"]}],[{"start":{"row":47,"column":40},"end":{"row":47,"column":41},"action":"insert","lines":[" "],"id":32}],[{"start":{"row":47,"column":41},"end":{"row":47,"column":42},"action":"insert","lines":["a"],"id":33},{"start":{"row":47,"column":42},"end":{"row":47,"column":43},"action":"insert","lines":["i"]},{"start":{"row":47,"column":43},"end":{"row":47,"column":44},"action":"insert","lines":["t"]},{"start":{"row":47,"column":44},"end":{"row":47,"column":45},"action":"insert","lines":["e"]}],[{"start":{"row":47,"column":45},"end":{"row":47,"column":46},"action":"insert","lines":[" "],"id":34}],[{"start":{"row":47,"column":46},"end":{"row":47,"column":47},"action":"insert","lines":["a"],"id":35}],[{"start":{"row":47,"column":32},"end":{"row":47,"column":33},"action":"remove","lines":["="],"id":36}],[{"start":{"row":47,"column":32},"end":{"row":47,"column":33},"action":"insert","lines":[" "],"id":37},{"start":{"row":47,"column":33},"end":{"row":47,"column":34},"action":"insert","lines":["a"]},{"start":{"row":47,"column":34},"end":{"row":47,"column":35},"action":"insert","lines":["n"]},{"start":{"row":47,"column":35},"end":{"row":47,"column":36},"action":"insert","lines":["e"]},{"start":{"row":47,"column":36},"end":{"row":47,"column":37},"action":"insert","lines":["d"]}],[{"start":{"row":47,"column":37},"end":{"row":47,"column":38},"action":"insert","lines":["i"],"id":38}],[{"start":{"row":47,"column":38},"end":{"row":47,"column":39},"action":"insert","lines":[" "],"id":39}],[{"start":{"row":47,"column":53},"end":{"row":47,"column":54},"action":"insert","lines":[" "],"id":40},{"start":{"row":47,"column":54},"end":{"row":47,"column":55},"action":"insert","lines":["l"]},{"start":{"row":47,"column":55},"end":{"row":47,"column":56},"action":"insert","lines":["o"]}],[{"start":{"row":47,"column":56},"end":{"row":47,"column":57},"action":"insert","lines":[" "],"id":41}],[{"start":{"row":47,"column":57},"end":{"row":47,"column":58},"action":"insert","lines":["a"],"id":42},{"start":{"row":47,"column":58},"end":{"row":47,"column":59},"action":"insert","lines":["g"]},{"start":{"row":47,"column":59},"end":{"row":47,"column":60},"action":"insert","lines":["e"]}],[{"start":{"row":47,"column":60},"end":{"row":47,"column":61},"action":"insert","lines":[","],"id":43},{"start":{"row":47,"column":61},"end":{"row":47,"column":62},"action":"insert","lines":["b"]}],[{"start":{"row":47,"column":62},"end":{"row":47,"column":63},"action":"insert","lines":[" "],"id":44}],[{"start":{"row":47,"column":63},"end":{"row":47,"column":64},"action":"insert","lines":["l"],"id":45},{"start":{"row":47,"column":64},"end":{"row":47,"column":65},"action":"insert","lines":["o"]}],[{"start":{"row":47,"column":65},"end":{"row":47,"column":66},"action":"insert","lines":[" "],"id":46},{"start":{"row":47,"column":66},"end":{"row":47,"column":67},"action":"insert","lines":["l"]}],[{"start":{"row":47,"column":67},"end":{"row":47,"column":68},"action":"insert","lines":["t"],"id":47}],[{"start":{"row":47,"column":68},"end":{"row":47,"column":69},"action":"insert","lines":[" "],"id":48},{"start":{"row":47,"column":69},"end":{"row":47,"column":70},"action":"insert","lines":["u"]},{"start":{"row":47,"column":70},"end":{"row":47,"column":71},"action":"insert","lines":["n"]},{"start":{"row":47,"column":71},"end":{"row":47,"column":72},"action":"insert","lines":["t"]}],[{"start":{"row":47,"column":72},"end":{"row":47,"column":73},"action":"insert","lines":["a"],"id":49},{"start":{"row":47,"column":73},"end":{"row":47,"column":74},"action":"insert","lines":["d"]},{"start":{"row":47,"column":74},"end":{"row":47,"column":75},"action":"insert","lines":["i"]}],[{"start":{"row":47,"column":75},"end":{"row":47,"column":76},"action":"insert","lines":[" "],"id":50}],[{"start":{"row":47,"column":52},"end":{"row":47,"column":53},"action":"insert","lines":["s"],"id":51},{"start":{"row":47,"column":53},"end":{"row":47,"column":54},"action":"insert","lines":["p"]},{"start":{"row":47,"column":54},"end":{"row":47,"column":55},"action":"insert","lines":["l"]},{"start":{"row":47,"column":55},"end":{"row":47,"column":56},"action":"insert","lines":["i"]},{"start":{"row":47,"column":56},"end":{"row":47,"column":57},"action":"insert","lines":["t"]}],[{"start":{"row":47,"column":57},"end":{"row":47,"column":58},"action":"insert","lines":[" "],"id":52},{"start":{"row":47,"column":58},"end":{"row":47,"column":59},"action":"insert","lines":["c"]},{"start":{"row":47,"column":59},"end":{"row":47,"column":60},"action":"insert","lines":["h"]},{"start":{"row":47,"column":60},"end":{"row":47,"column":61},"action":"insert","lines":["e"]}],[{"start":{"row":47,"column":61},"end":{"row":47,"column":62},"action":"insert","lines":["s"],"id":53},{"start":{"row":47,"column":62},"end":{"row":47,"column":63},"action":"insert","lines":["a"]},{"start":{"row":47,"column":63},"end":{"row":47,"column":64},"action":"insert","lines":["k"]},{"start":{"row":47,"column":64},"end":{"row":47,"column":65},"action":"insert","lines":["a"]}],[{"start":{"row":47,"column":65},"end":{"row":47,"column":66},"action":"insert","lines":[" "],"id":54}],[{"start":{"row":54,"column":23},"end":{"row":55,"column":0},"action":"insert","lines":["",""],"id":55},{"start":{"row":55,"column":0},"end":{"row":55,"column":4},"action":"insert","lines":["\t\t\t\t"]},{"start":{"row":55,"column":4},"end":{"row":56,"column":0},"action":"insert","lines":["",""]},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"insert","lines":["\t\t\t\t"]}],[{"start":{"row":56,"column":4},"end":{"row":56,"column":22},"action":"insert","lines":["#a,b=k.split('__')"],"id":56}],[{"start":{"row":55,"column":0},"end":{"row":55,"column":4},"action":"remove","lines":["\t\t\t\t"],"id":57},{"start":{"row":54,"column":23},"end":{"row":55,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":54,"column":23},"end":{"row":55,"column":0},"action":"insert","lines":["",""],"id":58},{"start":{"row":55,"column":0},"end":{"row":55,"column":4},"action":"insert","lines":["\t\t\t\t"]}],[{"start":{"row":55,"column":4},"end":{"row":55,"column":63},"action":"insert","lines":["#k anedi age__lt aite split chesaka a lo age,b lo lt untadi"],"id":59}],[{"start":{"row":47,"column":3},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":60},{"start":{"row":48,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["\t\t\t"]}],[{"start":{"row":48,"column":2},"end":{"row":48,"column":3},"action":"remove","lines":["\t"],"id":61}],[{"start":{"row":48,"column":1},"end":{"row":48,"column":2},"action":"remove","lines":["\t"],"id":62},{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":47,"column":3},"end":{"row":48,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":47,"column":3},"end":{"row":47,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1590415775325}